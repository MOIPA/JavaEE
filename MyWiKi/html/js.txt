Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-02-14T15:34:30+08:00

====== js ======
Created 星期三 14 二月 2018
	-js 面向对象语言	
		—**DOM**
		—**BOM**
		—**ECMAcript**核心 主要是语法

1.JS的历史
	js是面向对象的语言.
		1.封装
		2.继承
		3.多态
		4.聚集 -> 对象中具有引用其他对象的能力.
	js使用中绝大多数情况不需要进行面向对象的设计.跟多情况是使用已经设计好准备好的对象.
基于对象的语言.
2.JS的引入
	1>页面中直接在script标签中书写
	2>在script标签中引入
	注意:
		1>script标签位置任意. 但是 位置越靠前,执行越早.(重要,记住)
		2>js外部文件推荐扩展名是.js.但是其实任何后缀名都可以.
		3>使用script标签引入外部文件,那么该script标签中就不要书写js代码了.
3.JS的基本语法
	 //1 变量声明
		var num = 10;
		var str = 'haha';//"haha" 没有区别
		//变量声明使用var
		//变量区分大小写  str 和 STR 不是同一个变量
		//字符串使用  双引号 或 单引号包裹 都可以.
		//变量的类型可以随时改变.
		//命名规则==>匈牙利标记法
	 //2 行尾使用";" 作为一行的结束符号.(可以没有";",以折行符(回车)作为一行的结尾.)(不推荐)
		var num2 = 20
	 //3 js中的注释有两种 单行,多行
		// 单行注释"//"
		// 多行注释 "/* */"
		// 没有文档注释
	 //4 封装代码块 与 java一样,使用{}.
	 //5 变量声明时,前缀var 也不是必须的.
		 //加var 和 不加 var 有什么区别?
		 // 如果不使用var,那么该变量是全局变量
4.JS的类型
	//java ==> 基本数据类型 和 引用数据类型.
	//js中 类型也分为两种 ==>  原始数据类型 和 对象数据类型. 与java一模一样.
	//java中 基本数据类型有哪些? byte short int long  float double boolean char
	//js中 原始数据类型有哪些? 
		number(数字,浮点型,整型) 
		string(js语言的突破,没有char类型.)
		boolean
		null  (用来标示引用数据类型的占位符.通常都是人为赋值.)var person = null;
		undefined  (由null衍生出来的值,是当我们声明一个变量,) 
			//1.没有给该变量初始化值,那么系统会默认赋值为undefined
			//2.函数中没有返回值,那么默认返回undefined
		原始数据类型 判断符:
			typeof ==> 用来判断一个变量是哪种原始类型的.
			//为什么null返回object?
				//是js中的一个bug,这个bug 被认为很贴切.所以保留了该bug.
5.JS中的语句
	//java中有哪些语句?
		//循环: for while-do  do-while
		//判断: if switch
	//js中语句 与java中一模一样!
		//特殊: java中的增强for循环在js中没有.
		//		js中有for(var xxx in xxx) 语句. ==> 用的很少,用来遍历对象的属性.
6.JS中运算符
	一元运算符
		void==>放到后面,学完函数讲
	一元加法,减法
		var a = +1;
		var b = -1;
		在js中的高级应用.
		var c = +"1";  //这样写是在进行类型转换
		var d = +"abc"; // 这样写会转换失败,返回number中的特殊值 NaN.
	Boolean 运算符 ! && ||
		js中自动类型转换.
				//转换规律 (重点)
				//string ==>  ""==>转换为false 其他都为true;
				//number ==>  除了NaN,+0和-0.其他都转换为true.
				//null ==>  false
				//undefined ==> false
		//NaN特性:
			//NaN参与的任何boolean运算返回值都是false. 除了!=
		//因为undefined是null衍生出的,所以 
			alert(undefined == null);// true
	__比较运算符__
			alert(11>3);//true
			**//当运算符两端 , 一端是数字,一端是其他类型时, 其他类型会自动向数字类型转换**
			alert("11">3);// true
			alert(11>"3");//true
			**//字符串在进行比较时 ,规律是: 比较首字符asc码. 如果一样,比较第2位...**
			alert("11">"3");// false
			alert("11">"1");// true
			alert("abc">11);//false
	等性运算符  == != ===
		全等于: === ==> 比较时包括类型.
	
ECMAScript中的对象
	1.Object ==> 知道他是所有对象的超类. 
	2.Function对象
		//1> Function的创建
			 方式1:var fun1 = new Function("a","b","alert(a+b);");  最后一个参数是函数体其他之前的都是参数
			 方式2:var fun2 = function (a,b){alert(a+b);}
			 方式3:function fun3(a,b){alert(a+b)}
		  2>Function的调用 ==> js中函数的调用只看函数名称.
			调用时内置对象arguments
					arguments代表 函数运行期间实际参数列表.
					arguments.length ==> 实际参数个数
					arguments[0] ==> 第一个参数.
			应用: arguments 实现函数的重载.
		  3> 函数的返回
			1>如果函数没有显示指定返回值 那么函数返回值为undefined.
			2>//使用return 关键字,返回内容
			3>return 关键字,在js中也可以作为结束方法运行的功能.
			4>void运算符的应用.
ECMAScript中对对象的分类
			本地对象
				内建对象 ==> 不需要创建实例.直接使用 Global  Math
			主机对象 ==> DOM BOM 两部分.
ECMAScript中3个包装对象.
			String Number Boolean
		伪对象: string number boolean 这3个原始类型可以看作是伪对象, 能直接调用包装对象的方法和属性.
	String对象
		属性
			length
		方法
			//1 没用的方法
			/* alert(str1.big());
			alert(str1.sub()); 
			alert(str1.bold());*/
		//2 重要的方法
			//indexOf
			//lastIndexOf
			//charAt 
			//alert(str1.charAt(0));//a
			//charCodeAt 返回所在字符的asc码
			//alert(str1.charCodeAt(0));//97
			//subString 
			alert(str1.substring(0, 1));//a 
			//slice 支持负数. 从右往左.
			alert(str1.slice(0, -1));//a
		//3 与正则结合的方法(正则对象讲完回来看.)
			//split
			//replace
			//match
			//search
3个包装对象做类型转换
string 2 num: var num = new Number("123");
num 2 string: var str = new String(123);

instanceof运算符.
alert(num1 instanceof Number); //true or false
	
//------------------------------------------------------------------------------
	**Global对象**
不需要创建实例直接使用即可.
1. encodeURI
	同上 将16进制编码变为中文
2. decodeURI

 var url = "http://www.baidu.com?name=%E7....."//传输中文时中文根据编码变为十六进制
 var url = "http://www.baidu.com?name=张三"
alert(encodeURI(url));

3. decodeURIComponent 如果参数存在特殊字符需要用这个函数转码然后附加再url后面
4. encodeURIComponent

5. escape 过时
6. unescape 过时

7. parseInt 转为整数 				转换时从左到右能转换一个是一个直到遇到字符结束
8. parseFloat 转为浮点数

	var str = "123abc";
	+str => //NaN
	new Number(str); //NaN
	parseInt(str) //123   
	
**MATH对象**
看api文档吧 和数学有关 什么cos sin……
随机数:	Math.random();
四舍五入:	...round();
Math.max(1,2) ==>2
min......
pow乘方 math.pow(2,4) ==>2^4
PI:

**ARRAY对象**

数组：
	创建方式：
		var arr1 = [1,2,3];					---|	
		var arr2 = new Array(1,2,3);			---|	都是创建数组初始化
		var arr3 = new Array(3);  			创建一个长度为3的数组
	对象属性：
		js中的数组类型任意
		length 数组长
		arr1[1000] = 8;  在js中正确，中间空的都为undefined
	对象方法：		__join方法__：var arr == [1,2,3];
				alert(arr.join("-")); ⇒ 1-2-3;
				将数组中的每个元素连接起来返回一个字符串，默认连接符是“，”
		大量字符串优化：使用该方法可以模拟一个StringBuilder，普通字符相加会产生大量临时string对象，效率低下
		
		push方法：向数组末尾添加
		pop方法：删除返回末尾
		
		sort方法：排序 arr.sort() 该方法默认排序规则：按照字符串排序（从左到右比较ascall）
		想按照数字排序：
			function abx(a,b){
				if(a>b)return 1;
				else if(a==b)return 0;           ⇒  return a-b
				else return -1;
			}
			arr.sort(abx);
			
__DATE对象：__
	var date = new Date(); //当前时间
	date.getFullYear() //当前年份
	...getMonth 月份从0开始计数 要加1
	...Hours
	...Minutes
	...Seconds
	...Time	当前格林威治时间到现在过去的毫秒
	date.toLocaleString 获取本地时间格式字符串
	date.getDay 星期也从0开始
	
正则：
	例子：假设用户名以字母开头，长度为6-10
	参数1：正则 
	2：		匹配模式：	i ：忽略大小写
					g：全局匹配
					
	var reg1 = new RegExp("[a-zA-Z][a-zA-Z_0-9]{5,9}$","g");
	
	test方法：测试字符串与正则是否匹配
		reg1.test("asd123");  //true

















